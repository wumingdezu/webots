WEBOTS_HOME ?= ..

WEBOTS_HOME_PATH=$(strip $(subst \,/,$(WEBOTS_HOME)))

WEBOTS_DEPENDENCY_PATH ?= $(WEBOTS_HOME_PATH)/dependencies
DEPENDENCIES_URL = https://cyberbotics.com/files/repository/dependencies/windows/release

OPEN_VR_PACKAGE = openvr-1.0.7.zip
LUA_PACKAGE = lua-5.2.3.tar.gz
OIS_PACKAGE = libOIS.zip
PICO_PACKAGE = libpico.zip
LUA_GD_PACKAGE = lua-gd-windows.zip

PACKAGES = open-vr lua ois pico lua-gd
PACKAGES_CLEAN = $(addsuffix -clean, $(PACKAGES))
space :=
space +=
TARGET_PATH = $(subst $(space),\ ,$(WEBOTS_HOME_PATH)/msys64/mingw64/bin)

.PHONY: release debug distrib profile clean cleanse msys64 $(PACKAGES) $(PACKAGES_CLEAN)

release debug distrib profile: msys64 $(PACKAGES)

clean:

cleanse: $(PACKAGES_CLEAN)
	rm -f $(TARGET_PATH)/zlib1.dll
	rm -f $(TARGET_PATH)/Cyberbotics.Webots.Mingw64.Libraries.manifest

.ONESHELL:
msys64: $(TARGET_PATH) \
	$(TARGET_PATH)/zlib1.dll \
	$(TARGET_PATH)/Cyberbotics.Webots.Mingw64.Libraries.manifest \
	$(WEBOTS_HOME_PATH)/msys64/mingw64/lib \
	$(WEBOTS_HOME_PATH)/msys64/mingw32/bin \
	$(WEBOTS_HOME_PATH)/msys64/mingw32/lib

$(TARGET_PATH)/zlib1.dll: $(TARGET_PATH)
	cp /mingw64/bin/zlib1.dll $(TARGET_PATH)/

$(TARGET_PATH)/Cyberbotics.Webots.Mingw64.Libraries.manifest: $(TARGET_PATH)
	cp Cyberbotics.Webots.Mingw64.Libraries.manifest $(TARGET_PATH)/

$(WEBOTS_HOME_PATH)/msys64/mingw64/lib:
	mkdir -p $(WEBOTS_HOME_PATH)/msys64/mingw64/lib

$(WEBOTS_HOME_PATH)/msys64/mingw32/bin:
	mkdir -p $(WEBOTS_HOME_PATH)/msys64/mingw32/bin

$(WEBOTS_HOME_PATH)/msys64/mingw32/lib:
	mkdir -p $(WEBOTS_HOME_PATH)/msys64/mingw32/lib

$(TARGET_PATH):
	mkdir -p $(TARGET_PATH)

open-vr-clean:
	rm -rf "$(WEBOTS_HOME_PATH)/include/openvr" $(TARGET_PATH)/openvr_api.dll "$(WEBOTS_DEPENDENCY_PATH)/openvr-1.0.7"

open-vr: $(TARGET_PATH)/openvr_api.dll $(WEBOTS_HOME_PATH)/include/openvr

$(WEBOTS_HOME_PATH)/include/openvr: $(WEBOTS_DEPENDENCY_PATH)/openvr-1.0.7
	mkdir "$(WEBOTS_HOME_PATH)/include/openvr"
	cp -f "$(WEBOTS_DEPENDENCY_PATH)"/openvr-1.0.7/headers/* "$(WEBOTS_HOME_PATH)/include/openvr"

$(TARGET_PATH)/openvr_api.dll: $(WEBOTS_DEPENDENCY_PATH)/openvr-1.0.7
	mkdir -p $(TARGET_PATH)
	cp "$(WEBOTS_DEPENDENCY_PATH)/openvr-1.0.7/bin/win64/openvr_api.dll" "$@"

$(WEBOTS_DEPENDENCY_PATH)/openvr-1.0.7:
	rm -f "$(WEBOTS_DEPENDENCY_PATH)/$(OPEN_VR_PACKAGE)"
	wget "$(DEPENDENCIES_URL)/$(OPEN_VR_PACKAGE)" -P "$(WEBOTS_DEPENDENCY_PATH)"
	unzip -o "$(WEBOTS_DEPENDENCY_PATH)/$(OPEN_VR_PACKAGE)" -d "$(WEBOTS_DEPENDENCY_PATH)"
	rm -f "$(WEBOTS_DEPENDENCY_PATH)/$(OPEN_VR_PACKAGE)"
	touch "$(WEBOTS_DEPENDENCY_PATH)/openvr-1.0.7"

lua-clean:
	rm -rf $(TARGET_PATH)/lua52.dll "$(WEBOTS_DEPENDENCY_PATH)/lua-5.2.3"

lua: $(WEBOTS_DEPENDENCY_PATH)/lua-5.2.3/src/lua52.dll
	mkdir -p $(TARGET_PATH)
	cp "$(WEBOTS_DEPENDENCY_PATH)/lua-5.2.3/src/lua52.dll" "$(TARGET_PATH)/"

$(WEBOTS_DEPENDENCY_PATH)/lua-5.2.3:
	rm -f "$(WEBOTS_DEPENDENCY_PATH)/$(LUA_PACKAGE)"
	wget "http://www.lua.org/ftp/$(LUA_PACKAGE)" -P "$(WEBOTS_DEPENDENCY_PATH)"
	cd "$(WEBOTS_DEPENDENCY_PATH)"; tar zxfm $(LUA_PACKAGE) -C "$(WEBOTS_DEPENDENCY_PATH)"
	rm -f "$(WEBOTS_DEPENDENCY_PATH)/$(LUA_PACKAGE)"

$(WEBOTS_DEPENDENCY_PATH)/lua-5.2.3/src/lua52.dll: $(WEBOTS_DEPENDENCY_PATH)/lua-5.2.3
	+make -C "$(WEBOTS_DEPENDENCY_PATH)/lua-5.2.3" mingw

ois-clean:
	rm -rf "$(WEBOTS_DEPENDENCY_PATH)/$(OIS_PACKAGE)" $(TARGET_PATH)/OIS.dll $(TARGET_PATH)/XInput9_1_0.dll "$(WEBOTS_HOME_PATH)/include/libOIS"

ois: $(TARGET_PATH)/OIS.dll

$(TARGET_PATH)/OIS.dll: $(WEBOTS_DEPENDENCY_PATH)/$(OIS_PACKAGE)
	mkdir -p $(TARGET_PATH)
	unzip -o "$(WEBOTS_DEPENDENCY_PATH)/$(OIS_PACKAGE)" -d "$(WEBOTS_HOME_PATH)"
	mv "$(WEBOTS_HOME_PATH)/OIS.dll" "$(TARGET_PATH)/"
	mv "$(WEBOTS_HOME_PATH)/XInput9_1_0.dll" "$(TARGET_PATH)/"
	touch "$@"

$(WEBOTS_DEPENDENCY_PATH)/$(OIS_PACKAGE):
	rm -f "$(WEBOTS_DEPENDENCY_PATH)/$(OIS_PACKAGE)"
	wget "$(DEPENDENCIES_URL)/$(OIS_PACKAGE)" -P "$(WEBOTS_DEPENDENCY_PATH)"
	touch "$(WEBOTS_DEPENDENCY_PATH)/$(OIS_PACKAGE)"

pico-clean:
	rm -rf "$(WEBOTS_DEPENDENCY_PATH)/$(PICO_PACKAGE)" "$(WEBOTS_HOME_PATH)/include/libpico" $(TARGET_PATH)/libpico.dll "$(WEBOTS_HOME_PATH)/resources/pico"

pico: $(TARGET_PATH)/libpico.dll

$(TARGET_PATH)/libpico.dll: $(WEBOTS_DEPENDENCY_PATH)/$(PICO_PACKAGE)
	mkdir -p $(TARGET_PATH)
	unzip -o "$(WEBOTS_DEPENDENCY_PATH)/$(PICO_PACKAGE)" -d "$(WEBOTS_HOME_PATH)"
	mv "$(WEBOTS_HOME_PATH)/libpico.dll" "$(TARGET_PATH)/"
	touch "$@"

$(WEBOTS_DEPENDENCY_PATH)/$(PICO_PACKAGE):
	rm -f "$(WEBOTS_DEPENDENCY_PATH)/$(PICO_PACKAGE)"
	wget "$(DEPENDENCIES_URL)/$(PICO_PACKAGE)" -P "$(WEBOTS_DEPENDENCY_PATH)"
	touch "$(WEBOTS_DEPENDENCY_PATH)/$(PICO_PACKAGE)"

lua-gd-clean:
	rm -rf "$(WEBOTS_DEPENDENCY_PATH)/$(LUA_GD_PACKAGE)" $(TARGET_PATH)/gd.dll

lua-gd: $(TARGET_PATH)/gd.dll

$(TARGET_PATH)/gd.dll: $(WEBOTS_DEPENDENCY_PATH)/$(LUA_GD_PACKAGE)
	mkdir -p $(TARGET_PATH)
	unzip -o "$(WEBOTS_DEPENDENCY_PATH)/$(LUA_GD_PACKAGE)" -d "$(WEBOTS_HOME_PATH)/msys64/mingw64/bin"
	touch "$(TARGET_PATH)/gd.dll"

$(WEBOTS_DEPENDENCY_PATH)/$(LUA_GD_PACKAGE):
	rm -f "$(WEBOTS_DEPENDENCY_PATH)/$(LUA_GD_PACKAGE)"
	wget "$(DEPENDENCIES_URL)/$(LUA_GD_PACKAGE)" -P "$(WEBOTS_DEPENDENCY_PATH)"
	touch "$(WEBOTS_DEPENDENCY_PATH)/$(LUA_GD_PACKAGE)"
